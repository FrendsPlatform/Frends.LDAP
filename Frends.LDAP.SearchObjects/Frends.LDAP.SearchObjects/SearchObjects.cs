using Frends.LDAP.SearchObjects.Definitions;
using System.ComponentModel;
using Novell.Directory.Ldap;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Linq;
using System.Text;

namespace Frends.LDAP.SearchObjects;

/// <summary>
/// LDAP task.
/// </summary>
public class LDAP
{
    /// <summary>
    /// Search objects from Active Directory.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.LDAP.SearchObjects)
    /// </summary>
    /// <param name="input">Input parameters.</param>
    /// <param name="connection">Connection parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, string Error, string CommonName, List&lt;SearchResult&gt; SearchResult }</returns>
    public static Result SearchObjects([PropertyTab] Input input, [PropertyTab] Connection connection, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(connection.Host))
            throw new Exception("Host is missing.");

        if (string.IsNullOrEmpty(connection.User) && !connection.AnonymousBind)
            throw new Exception("Username is missing.");

        if (string.IsNullOrEmpty(connection.Password) && !connection.AnonymousBind)
            throw new Exception("Password is missing.");

        LdapConnectionOptions ldco = new LdapConnectionOptions();

        var encoding = GetEncoding(input.ContentEncoding, input.ContentEncodingString, input.EnableBom);

        if (connection.IgnoreCertificates)
            ldco.ConfigureRemoteCertificateValidationCallback((sender, certificate, chain, errors) => true);

        LdapConnection conn = new LdapConnection(ldco);
        var defaultPort = connection.SecureSocketLayer ? 636 : 389;
        var atr = new List<string>();
        var searchResults = new List<SearchResult>();
        var searchConstraints = new LdapSearchConstraints(
                input.MsLimit,
                input.ServerTimeLimit,
                SetSearchDereference(input),
                input.MaxResults,
                false,
                input.BatchSize,
                null,
                0);

        if (input.Attributes != null && input.SearchOnlySpecifiedAttributes)
            foreach (var i in input.Attributes)
                atr.Add(i.Key.ToString());

        // Default to v3 as it's the most commonly used version
        var ldapVersion = 3;
        switch (connection.LDAPProtocolVersion)
        {
            case LDAPVersion.V2:
                ldapVersion = 2;
                break;
            case LDAPVersion.V3:
                ldapVersion = 3;
                break;
            default:
                throw new ArgumentException($"Unsupported LDAP protocol version. {connection.LDAPProtocolVersion}");
        }

        try
        {
            conn.SecureSocketLayer = connection.SecureSocketLayer;
            conn.Connect(connection.Host, connection.Port == 0 ? defaultPort : connection.Port);
            if (connection.TLS)
                conn.StartTls();

            if (connection.AnonymousBind)
                conn.Bind(version: ldapVersion, dn: null, passwd: (string)null);
            else
                conn.Bind(version: ldapVersion, connection.User, connection.Password);

            LdapSearchQueue queue = conn.Search(
                input.SearchBase,
                SetScope(input),
                string.IsNullOrEmpty(input.Filter) ? null : input.Filter,
                atr.ToArray(),
                input.TypesOnly,
                null,
                searchConstraints);

            LdapMessage message;
            while ((message = queue.GetResponse()) != null)
            {
                if (message is LdapSearchResult ldapSearchResult)
                {
                    var entry = ldapSearchResult.Entry;
                    var attributeList = new List<AttributeSet>();
                    var getAttributeSet = entry.GetAttributeSet();
                    var ienum = getAttributeSet.GetEnumerator();

                    while (ienum.MoveNext())
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        LdapAttribute attribute = ienum.Current;
                        var attributeName = attribute.Name;
                        dynamic attributeVal = null;
                        var byteValues = attribute.ByteValues;

                        var test = attribute.StringValueArray;
                        var test1 = attribute.StringValue;
                        var values = new List<byte[]>();
                        while (byteValues.MoveNext())
                        {
                            cancellationToken.ThrowIfCancellationRequested();
                            values.Add(byteValues.Current);
                        }

                        if (input.Attributes != null && input.Attributes.Any(x => x.Key == attributeName))
                        {
                            var inputAttribute = input.Attributes.FirstOrDefault(x => x.Key == attributeName);

                            if (inputAttribute.ReturnAsByteArray)
                            {
                                attributeVal = values.Count > 1 ? values : values[0];
                            }
                            else
                            {
                                if (values.Count == 1)
                                {
                                    attributeVal = encoding.GetString(values[0]);
                                }
                                else if (values.Count > 1)
                                {
                                    attributeVal = new List<string>();
                                    foreach (var byteValue in values)
                                        ((List<string>)attributeVal).Add(encoding.GetString(byteValue));
                                }
                            }
                        }
                        else
                        {
                            if (values.Count == 1)
                            {
                                attributeVal = encoding.GetString(values[0]);
                            }
                            else if (values.Count > 1)
                            {
                                attributeVal = new List<string>();
                                foreach (var byteValue in values)
                                    ((List<string>)attributeVal).Add(encoding.GetString(byteValue));
                            }
                        }

                        attributeList.Add(new AttributeSet { Key = attributeName, Value = attributeVal });
                    }

                    searchResults.Add(new SearchResult() { DistinguishedName = entry.Dn, AttributeSet = attributeList });
                }
            }
            return new Result(true, null, searchResults);
        }
        catch (LdapException ex)
        {
            if (connection.ThrowExceptionOnError)
                throw;
            return new Result(false, $"LdapException: {ex.Message}", null);
        }
        catch (Exception ex)
        {
            throw new Exception($"SearchObjects error: {ex}");
        }
        finally
        {
            if (connection.TLS) conn.StopTls();
            conn.Disconnect();
        }
    }

    internal static int SetScope(Input input)
    {
        return input.Scope switch
        {
            Scopes.ScopeBase => 0,
            Scopes.ScopeOne => 1,
            Scopes.ScopeSub => 2,
            _ => throw new Exception("SetScope error: Invalid scope."),
        };
    }

    internal static int SetSearchDereference(Input input)
    {
        return input.SearchDereference switch
        {
            SearchDereference.DerefNever => 0,
            SearchDereference.DerefSearching => 1,
            SearchDereference.DerefFinding => 2,
            SearchDereference.DerefAlways => 3,
            _ => throw new Exception("SetSearchConstraint error: Invalid search constraint."),
        };
    }

    internal static Encoding GetEncoding(ContentEncoding encoding, string encodingString, bool enableBom)
    {
        return encoding switch
        {
            ContentEncoding.UTF8 => enableBom ? new UTF8Encoding(true) : new UTF8Encoding(false),
            ContentEncoding.ASCII => new ASCIIEncoding(),
            ContentEncoding.Default => Encoding.Default,
            ContentEncoding.WINDOWS1252 => CodePagesEncodingProvider.Instance.GetEncoding("windows-1252"),
            ContentEncoding.Other => CodePagesEncodingProvider.Instance.GetEncoding(encodingString),
            _ => throw new ArgumentOutOfRangeException($"Unknown Encoding type: '{encoding}'."),
        };
    }
}