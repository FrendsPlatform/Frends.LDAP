using Frends.LDAP.SearchObjects.Definitions;
using System.ComponentModel;
using Novell.Directory.Ldap;
using Novell.Directory.Ldap.Controls;
using System;
using System.Collections.Generic;
using System.Threading;

namespace Frends.LDAP.SearchObjects;

/// <summary>
/// LDAP task.
/// </summary>
public class LDAP
{
    /// <summary>
    /// Search objects from Active Directory.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.LDAP.SearchObjects)
    /// </summary>
    /// <param name="input">Input parameters.</param>
    /// <param name="connection">Connection parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, string Error, string CommonName, List&lt;SearchResult&gt; SearchResult }</returns>
    public static Result SearchObjects([PropertyTab] Input input, [PropertyTab] Connection connection, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(connection.Host) || string.IsNullOrWhiteSpace(connection.User) || string.IsNullOrWhiteSpace(connection.Password))
            throw new ArgumentException("Connection parameters missing.");

        var defaultPort = connection.SecureSocketLayer ? 636 : 389;
        var atr = new List<string>();
        var searchResults = new List<SearchResult>();

        var searchConstraints = new LdapSearchConstraints(
            input.MsLimit,
            input.ServerTimeLimit,
            SetSearchDereference(input),
            input.MaxResults,
            false,
            input.BatchSize,
            null,
            0);

        if (input.Attributes != null)
            foreach (var i in input.Attributes)
                atr.Add(i.Key.ToString());

        try
        {
            using var conn = new LdapConnection();
            conn.SecureSocketLayer = connection.SecureSocketLayer;
            conn.Connect(connection.Host, connection.Port == 0 ? defaultPort : connection.Port);
            if (connection.TLS) conn.StartTls();
            conn.Bind(connection.User, connection.Password);
            byte[] cookie = null;

            do
            {
                var pagedResultsControl = new SimplePagedResultsControl(input.PageSize, cookie);
                searchConstraints.SetControls(pagedResultsControl);

                var queue = conn.Search(
                    input.SearchBase,
                    SetScope(input),
                    input.Filter,
                    atr.ToArray(),
                    input.TypesOnly,
                    null,
                    searchConstraints);

                ProcessSearchResults(queue, searchResults, cancellationToken, ref cookie);
            } while (cookie != null && cookie.Length > 0);

            return new Result(true, null, searchResults);
        }
        catch (LdapException ex)
        {
            return new Result(false, ex.Message, null);
        }
        catch (Exception ex)
        {
            throw new Exception($"SearchObjects error: {ex}");
        }
    }

    private static void ProcessSearchResults(LdapSearchQueue queue, List<SearchResult> searchResults, CancellationToken cancellationToken, ref byte[] cookie)
    {
        LdapMessage message;
        while ((message = queue.GetResponse()) != null)
        {
            cancellationToken.ThrowIfCancellationRequested();

            if (message is LdapSearchResult ldapSearchResult)
            {
                var entry = ldapSearchResult.Entry;
                var attributeList = new List<AttributeSet>();

                foreach (LdapAttribute attribute in entry.GetAttributeSet())
                {
                    attributeList.Add(new AttributeSet { Key = attribute.Name, Value = attribute.StringValue });
                }

                searchResults.Add(new SearchResult { DistinguishedName = entry.Dn, AttributeSet = attributeList });
            }
            else if (message is LdapResponse ldapResponse)
            {
                var controls = ldapResponse.Controls;
                if (controls != null)
                {
                    foreach (var control in controls)
                    {
                        if (control is SimplePagedResultsControl pagedResultsResponse)
                        {
                            cookie = pagedResultsResponse.Cookie;
                        }
                    }
                }
            }
        }
    }

    internal static int SetScope(Input input)
    {
        return input.Scope switch
        {
            Scopes.ScopeBase => 0,
            Scopes.ScopeOne => 1,
            Scopes.ScopeSub => 2,
            _ => throw new Exception("SetScope error: Invalid scope."),
        };
    }

    internal static int SetSearchDereference(Input input)
    {
        return input.SearchDereference switch
        {
            SearchDereference.DerefNever => 0,
            SearchDereference.DerefSearching => 1,
            SearchDereference.DerefFinding => 2,
            SearchDereference.DerefAlways => 3,
            _ => throw new Exception("SetSearchConstraint error: Invalid search constraint."),
        };
    }
}